package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CrsChainRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "entId":
			z.EntId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "EntId")
				return
			}
		case "blockHash":
			z.BlockHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "transactionHash":
			z.TransactionHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionHash")
				return
			}
		case "data":
			z.Data, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "createTime":
			z.CreateTime, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "belongTo":
			z.BelongTo, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BelongTo")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CrsChainRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "entId"
	err = en.Append(0x86, 0xa5, 0x65, 0x6e, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.EntId)
	if err != nil {
		err = msgp.WrapError(err, "EntId")
		return
	}
	// write "blockHash"
	err = en.Append(0xa9, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.BlockHash)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "transactionHash"
	err = en.Append(0xaf, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.TransactionHash)
	if err != nil {
		err = msgp.WrapError(err, "TransactionHash")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "createTime"
	err = en.Append(0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// write "belongTo"
	err = en.Append(0xa8, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BelongTo)
	if err != nil {
		err = msgp.WrapError(err, "BelongTo")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CrsChainRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "entId"
	o = append(o, 0x86, 0xa5, 0x65, 0x6e, 0x74, 0x49, 0x64)
	o = msgp.AppendInt(o, z.EntId)
	// string "blockHash"
	o = append(o, 0xa9, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.BlockHash)
	// string "transactionHash"
	o = append(o, 0xaf, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.TransactionHash)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.Data)
	// string "createTime"
	o = append(o, 0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendString(o, z.CreateTime)
	// string "belongTo"
	o = append(o, 0xa8, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f)
	o = msgp.AppendInt(o, z.BelongTo)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CrsChainRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "entId":
			z.EntId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EntId")
				return
			}
		case "blockHash":
			z.BlockHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "transactionHash":
			z.TransactionHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionHash")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "createTime":
			z.CreateTime, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "belongTo":
			z.BelongTo, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BelongTo")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CrsChainRecord) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.BlockHash) + 16 + msgp.StringPrefixSize + len(z.TransactionHash) + 5 + msgp.StringPrefixSize + len(z.Data) + 11 + msgp.StringPrefixSize + len(z.CreateTime) + 9 + msgp.IntSize
	return
}
