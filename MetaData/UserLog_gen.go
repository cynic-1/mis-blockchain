package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *UserLog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "identityidentifier":
			z.IdentityIdentifier, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IdentityIdentifier")
				return
			}
		case "command":
			z.Command, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "ugroupid":
			z.UGroupID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "UGroupID")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "source":
			z.Source, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "data":
			z.Data, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "permission":
			z.Permission, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
		case "level":
			z.Level, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "destination":
			z.Destination, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "protocol":
			z.Protocol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Protocol")
				return
			}
		case "website":
			z.WebSite, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "WebSite")
				return
			}
		case "filterwebsite":
			z.FilterWebSite, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FilterWebSite")
				return
			}
		case "warninfo":
			z.WarnInfo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "WarnInfo")
				return
			}
		case "isinner":
			z.IsInner, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IsInner")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserLog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "identityidentifier"
	err = en.Append(0x8f, 0xb2, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.IdentityIdentifier)
	if err != nil {
		err = msgp.WrapError(err, "IdentityIdentifier")
		return
	}
	// write "command"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Command)
	if err != nil {
		err = msgp.WrapError(err, "Command")
		return
	}
	// write "ugroupid"
	err = en.Append(0xa8, 0x75, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.UGroupID)
	if err != nil {
		err = msgp.WrapError(err, "UGroupID")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "source"
	err = en.Append(0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Source)
	if err != nil {
		err = msgp.WrapError(err, "Source")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "permission"
	err = en.Append(0xaa, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Permission)
	if err != nil {
		err = msgp.WrapError(err, "Permission")
		return
	}
	// write "level"
	err = en.Append(0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Level)
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "destination"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Destination)
	if err != nil {
		err = msgp.WrapError(err, "Destination")
		return
	}
	// write "protocol"
	err = en.Append(0xa8, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Protocol)
	if err != nil {
		err = msgp.WrapError(err, "Protocol")
		return
	}
	// write "website"
	err = en.Append(0xa7, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.WebSite)
	if err != nil {
		err = msgp.WrapError(err, "WebSite")
		return
	}
	// write "filterwebsite"
	err = en.Append(0xad, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FilterWebSite)
	if err != nil {
		err = msgp.WrapError(err, "FilterWebSite")
		return
	}
	// write "warninfo"
	err = en.Append(0xa8, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.WarnInfo)
	if err != nil {
		err = msgp.WrapError(err, "WarnInfo")
		return
	}
	// write "isinner"
	err = en.Append(0xa7, 0x69, 0x73, 0x69, 0x6e, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IsInner)
	if err != nil {
		err = msgp.WrapError(err, "IsInner")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserLog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 15
	// string "identityidentifier"
	o = append(o, 0x8f, 0xb2, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, z.IdentityIdentifier)
	// string "command"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	o = msgp.AppendString(o, z.Command)
	// string "ugroupid"
	o = append(o, 0xa8, 0x75, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64)
	o = msgp.AppendInt(o, z.UGroupID)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "source"
	o = append(o, 0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	o = msgp.AppendString(o, z.Source)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.Data)
	// string "permission"
	o = append(o, 0xaa, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Permission)
	// string "level"
	o = append(o, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
	o = msgp.AppendInt(o, z.Level)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.Timestamp)
	// string "destination"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Destination)
	// string "protocol"
	o = append(o, 0xa8, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Protocol)
	// string "website"
	o = append(o, 0xa7, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65)
	o = msgp.AppendString(o, z.WebSite)
	// string "filterwebsite"
	o = append(o, 0xad, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65)
	o = msgp.AppendString(o, z.FilterWebSite)
	// string "warninfo"
	o = append(o, 0xa8, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x66, 0x6f)
	o = msgp.AppendString(o, z.WarnInfo)
	// string "isinner"
	o = append(o, 0xa7, 0x69, 0x73, 0x69, 0x6e, 0x6e, 0x65, 0x72)
	o = msgp.AppendInt(o, z.IsInner)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserLog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "identityidentifier":
			z.IdentityIdentifier, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IdentityIdentifier")
				return
			}
		case "command":
			z.Command, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "ugroupid":
			z.UGroupID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UGroupID")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "source":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "permission":
			z.Permission, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
		case "level":
			z.Level, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "destination":
			z.Destination, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "protocol":
			z.Protocol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Protocol")
				return
			}
		case "website":
			z.WebSite, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WebSite")
				return
			}
		case "filterwebsite":
			z.FilterWebSite, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FilterWebSite")
				return
			}
		case "warninfo":
			z.WarnInfo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WarnInfo")
				return
			}
		case "isinner":
			z.IsInner, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsInner")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserLog) Msgsize() (s int) {
	s = 1 + 19 + msgp.StringPrefixSize + len(z.IdentityIdentifier) + 8 + msgp.StringPrefixSize + len(z.Command) + 9 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.StringPrefixSize + len(z.Source) + 5 + msgp.StringPrefixSize + len(z.Data) + 11 + msgp.StringPrefixSize + len(z.Permission) + 6 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.Timestamp) + 12 + msgp.StringPrefixSize + len(z.Destination) + 9 + msgp.StringPrefixSize + len(z.Protocol) + 8 + msgp.StringPrefixSize + len(z.WebSite) + 14 + msgp.StringPrefixSize + len(z.FilterWebSite) + 9 + msgp.StringPrefixSize + len(z.WarnInfo) + 8 + msgp.IntSize
	return
}
